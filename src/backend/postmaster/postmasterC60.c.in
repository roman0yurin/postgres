
/** Экпортируемая функция сохранения в файл параметров для запуска backend-процесса
 * (механизм, который используется в Postgres, когда задефайнен EXEC_BACKEND) */

char *c60_save_backend_parameters_to_file(char *filename)
{
#ifdef EXEC_BACKEND
    calculate_name_for_temp_file(filename, MAXPGPATH);

    BackendParameters params;
    memset(&params, 0, sizeof(params));

    Port port;
    memset(&port, 0, sizeof(port));
    port.raddr.addr.ss_family = AF_UNIX;

    bool params_saved =
#ifndef WIN32
        save_backend_variables(&params, &port);
#else
    false;//TODO реализация под Windows
#endif
    if(params_saved)
    {
        params.syslogPipe[0] = -1;

        for (int i = 0; i < MAXLISTEN; i++)
            params.ListenSocket[i] = PGINVALID_SOCKET;

        /* Open file */
        FILE *fp = AllocateFile(filename, PG_BINARY_W);

        if(!fp && MakePGDirectory(PG_TEMP_FILES_DIR) == 0)
            fp = AllocateFile(filename, PG_BINARY_W);

        if (fp)
        {
            if (fwrite(&params, sizeof(BackendParameters), 1, fp) != 1)
            {
                params_saved = false;
                ereport(LOG, (errcode_for_file_access(),
                            errmsg("could not write to file \"%s\": %m", filename)));
            }

            if (FreeFile(fp))
                ereport(LOG, (errcode_for_file_access(),
                            errmsg("could not write to file \"%s\": %m", filename)));
        }
        else
        {
            params_saved = false;
            ereport(LOG, (errcode_for_file_access(),
                        errmsg("could not write to file \"%s\": %m", filename)));
        }
    }

    return params_saved? filename : NULL;
#else
    return NULL;
#endif
}

bool patch_backend_parameters(char *filename, int tmp_file_handle)
{
#ifdef EXEC_BACKEND
    bool result = true;
    FILE* fd = fopen(filename, "r+b");
    if(fd)
    {
        BackendParameters params;
        if((result = fread(&params, sizeof(params), 1, fd) == 1))
        {
            params.postmaster_alive_fds[POSTMASTER_FD_OWN] = tmp_file_handle;
            result = !fseek(fd, 0, SEEK_SET) && fwrite(&params, sizeof(params), 1, fd) == 1;
        }

        fclose(fd);
    }
    else
        return false;

    return result;
#else
    return false;
#endif
}
